#include <iostream>
#include <algorithm>
using namespace std;
const int MAXN = 100; 
struct Interval {
    int start, end, weight;
};
bool compare(Interval a, Interval b) {
    return a.end < b.end;
}
int binarySearch(Interval intervals[], int i) {
    int lo = 0, hi = i - 1;
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        if (intervals[mid].end <= intervals[i].start) {
            if (intervals[mid+1].end <= intervals[i].start) {
                lo = mid + 1;
            } else {
                return mid;
            }
        } else {
            hi = mid - 1;
        }
    }
    return -1;
}
int weightedIntervalScheduling(Interval intervals[], int n) {
    sort(intervals, intervals+n, compare);
    int dp[MAXN];
    dp[0] = intervals[0].weight;

    for (int i = 1; i < n; i++) {
        int prev = binarySearch(intervals, i);
        int incl = intervals[i].weight;
        if (prev != -1) {
            incl += dp[prev];
        }
        dp[i] = max(incl, dp[i-1]);
    }

    return dp[n-1];
}

int main() {
    int n;
    cout << "Enter the number of intervals: ";
    cin >> n;

    Interval intervals[MAXN];
    cout << "Enter the start time, end time, and weight of each interval:" << endl;
    for (int i = 0; i < n; i++) {
        cin >> intervals[i].start >> intervals[i].end >> intervals[i].weight;
    }

    int maxWeight = weightedIntervalScheduling(intervals, n);
    cout << "The maximum weight that can be obtained is: " << maxWeight << endl;

    return 0;
}
