#include <iostream>
#include <algorithm>
using namespace std;

#define MAX_EDGES 100001
#define MAX_VERTICES 100001

struct Edge {
    int u, v, w;
};

bool compareEdges(Edge a, Edge b) {
    return a.w < b.w;
}

int findParent(int parent[], int vertex) {
    if (parent[vertex] == vertex) {
        return vertex;
    }
    return parent[vertex] = findParent(parent, parent[vertex]);
}

void unionVertices(int parent[], int rank[], int u, int v) {
    int parentU = findParent(parent, u);
    int parentV = findParent(parent, v);
    if (rank[parentU] < rank[parentV]) {
        parent[parentU] = parentV;
    } else if (rank[parentU] > rank[parentV]) {
        parent[parentV] = parentU;
    } else {
        parent[parentU] = parentV;
        rank[parentV]++;
    }
}

void kruskalsAlgorithm(Edge edges[], int m, int n) {
    sort(edges, edges + m, compareEdges);

    int parent[MAX_VERTICES];
    int rank[MAX_VERTICES];
    for (int i = 0; i < n; i++) {
        parent[i] = i;
        rank[i] = 0;
    }

    int count = 0;
    for (int i = 0; i < m; i++) {
        int u = edges[i].u;
        int v = edges[i].v;
        int w = edges[i].w;
        if (findParent(parent, u) != findParent(parent, v)) {
            unionVertices(parent, rank, u, v);
            cout << u << " - " << v << " : " << w << endl;
            count++;
            if (count == n - 1) {
                break;
            }
        }
    }
}

int main() {
    int n, m;
    cout << "Enter the number of vertices and edges: ";
    cin >> n >> m;

    Edge edges[MAX_EDGES];
    cout << "Enter the edges (u, v, w):" << endl;
    for (int i = 0; i < m; i++) {
        cin >> edges[i].u >> edges[i].v >> edges[i].w;
    }

    cout << "Edges in the minimum spanning tree:" << endl;
    kruskalsAlgorithm(edges, m, n);

    return 0;
}
